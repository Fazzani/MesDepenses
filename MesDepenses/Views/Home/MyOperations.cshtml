@*<script src="~/Scripts/Custom/ViewModel/IndexVM.js"></script>*@

@*<div class="actions">
    <input type="button" value="group by" data-bind="click: groupBy" />
    <input type="button" value="sort by" data-bind="click: sortBy" />
</div>*@

<div class="row">
    <div id="breadcrumb" class="col-md-12">
        <ol class="breadcrumb">
            <li><a href="#">Dashboard</a></li>
            <li><a href="#">Tables</a></li>
            <li><a href="#">Data Tables</a></li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-xs-12">
        <div class="box">
            <div class="box-header">
                <div class="box-name">
                    <i class="fa fa-usd"></i>
                    <span>Mes Operations</span>
                </div>
                <div class="box-icons">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="expand-link">
                        <i class="fa fa-expand"></i>
                    </a>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
                <div class="no-move"></div>
            </div>
            <div class="box-content no-padding" id="table">
                <table class="table table-bordered table-striped table-hover table-heading table-datatable" id="datatable-3">
                    <thead>
                        <tr>
                            <th>Libellé
                            </th>
                            <th>Date
                            </th>
                            <th>Montant
                            </th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: items">
                        <tr data-toggle="tooltip" data-bind="tooltip: { title: Libelle, trigger: 'hover', placement: 'bottom' }" data-container="body">
                            <td data-bind="text: SimpleLibelle"></td>
                            <td data-bind="text: Datevaleur"></td>
                            <td data-bind="text: Montant"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Libellé
                            </th>
                            <th>Date
                            </th>
                            <th>Montant
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    //var carteregex = "^carte[ ]+([0-9]{6})+[ ]+cb:\\*([0-9]{7})[ ]+([a-z-A-Z.]+)+[ ]+([0-9]{2})(.+)$";
    var carteregex = "^carte[ ]+([0-9]{6})+[ ]+cb:\\*([0-9]{7})[ ]+(.+)$";

    var OperationVM = function (montant, libelle, datevaleur, reference, compte) {
        var self = this;
        this.Montant = ko.observable(montant);
        this.Libelle = ko.observable(libelle);
        this.Datevaleur = ko.observable(datevaleur);
        this.Reference = ko.observable(reference);
        this.Compte = ko.observable(compte);
        this.isCarte = ko.observable(false);
        this.isPrlv = ko.observable(false);
        this.isRetrait = ko.observable(false);
        this.isCheque = ko.observable(false);
        this.$type = 'OperationVM';
        this.SimpleLibelle = ko.dependentObservable(function () {
            var myRegexp = new RegExp(carteregex, "gi");
            //console.log(self.Libelle());

            var match = myRegexp.exec(self.Libelle());
            if (match != null) {
                self.isCarte = true;
                return match[3];
            }
            return self.Libelle();
        }, this);


    };

    var urlGetData = '@Url.Action("ReadData", "Home")';
    var ViewModel = function () {
        var self = this;

        self.items = ko.observableArray();

        self.compteLength = ko.computed(function () {
            return self.items().length;
        }, this);

        self.groupBy = function () {
            var tmp = _.groupBy(self.items(), function (item) {
                return item.Montant().length;
            });
            self.items(tmp);
        };

        self.sortBy = function () {
            self.items(_.sortBy(self.items(), function (item) { return parseInt(item.Montant()); }));
        };

        self.load = function () {
            $.getJSON(urlGetData, function (data) {
                //console.log(JSON.parse(data));
                var mappedData = ko.utils.arrayMap(JSON.parse(data), function (item) {
                    return new OperationVM(item.Montant, item.Libelle, item.Datevaleur, item.Reference, item.Compte);
                });
                self.items(mappedData);

            });
        };
        self.load();
    };
    $(function () {
        ko.cleanNode($("#table")[0]);
        ko.applyBindings(new ViewModel(), $("#table")[0]);
        $("[data-toggle='tooltip']").tooltip();
        // Run Datables plugin and create 3 variants of settings
        function AllTables() {
            TestTable3();
            LoadSelect2Script(MakeSelect2);
        }
        function MakeSelect2() {
            $('select').select2();
            $('.dataTables_filter').each(function () {
                $(this).find('label input[type=text]').attr('placeholder', 'Search');
            });
        }

        // Load Datatables and run plugin on tables 
        LoadDataTablesScripts(AllTables);
        // Add Drag-n-Drop feature
        WinMove();

    });
</script>